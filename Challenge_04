##################################################################################################################################
SuProblem Statement:
##################################################################################################################################


We define the following terms:

    Lexicographical Order, also known as alphabetic or dictionary order, orders characters as follows:

    For example, ball < cat, dog < dorm, Happy < happy, Zoo < ball.
    A substring of a string is a contiguous block of characters in the string. For example, the substrings of abc are a, b, c, ab, bc, and abc.

Given a string,
, and an integer, , complete the function so that it finds the lexicographically smallest and largest substrings of length

.

Input Format

The first line contains a string denoting
.
The second line contains an integer denoting

.

Constraints

    consists of English alphabetic letters only (i.e., [a-zA-Z]).

Output Format

Return the respective lexicographically smallest and largest substrings as a single newline-separated string.

Sample Input 0

welcometojava
3

Sample Output 0

ava
wel

Explanation 0

String
has the following lexicographically-ordered substrings of length

:

We then return the first (lexicographically smallest) substring and the last (lexicographically largest) substring as two newline-separated values (i.e., ava\nwel).

The stub code in the editor then prints ava as our first line of output and wel as our second line of output.




##################################################################################################################################
Submitted Solution:
##################################################################################################################################
import java.util.Scanner;

public class Solution {

    public static String getSmallestAndLargest(String s, int k) {
        String largest= s.substring(0, k);
        String smallest= s.substring(0, k);


        // Complete the function
        // 'smallest' must be the lexicographically smallest substring of length 'k'
        // 'largest' must be the lexicographically largest substring of length 'k'

    for(int index = 0; index < s.length()-k+1; index++){
        String str = s.substring(index, index+k);

        boolean s_not_done = false;
        boolean l_not_done = false;
        for(int loop = 0; loop<k; loop++){
            char one_s = smallest.charAt(loop);
            char one_l = largest.charAt(loop);
            char two = str.charAt(loop);
            if(one_s != two && !s_not_done){
                int diff = one_s - two;
                if(diff>0){
                    smallest = str;
                    s_not_done = true;
                }else if(diff<=0){
                    s_not_done = true;
                }
            }
            if(one_l != two && !l_not_done){
                int diff = one_l - two;
                if(diff<0){
                    largest = str;
                    l_not_done = true;
                }else if(diff>=0){
                    l_not_done = true;
                }
            }
        }

    }
        return smallest + "\n" + largest;
    }
